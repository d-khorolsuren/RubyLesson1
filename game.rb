class Player
  def hand
    # Display "Sentences that require the player to enter 0 to 2".
    puts "Please enter a number."
    puts "0:グー, 1:チョキ, 2:パー"
    # Get what the player has entered in the variable "input_hand" and assign it.
      #Hint! Use the "gets method".
    # input_hand =
    # 「input_hand」(取得した値)が「0, 1, 2」のいずれかだとwhileから脱出させ、それ以外だと初めから繰り返させます。
      #Hint! Use "while" and "if".
      # Let's implement according to the example of the type after * * Be careful of commenting out when implementing
      while true
      	input_hand = gets.chomp
        if input_hand == "0" || input_hand == "1" || input_hand == "2"
          # 「input_hand」(取得した値)をそのまま返します。
        return input_hand
        # else * Other than the conditions
    	else
          # Display "Sentences that require the player to enter 0 to 2".
        puts "Please enter the number again."
        puts "0: Goo, 1: Choki, 2: Par"
          # Get what the player has entered in the variable "input_hand" and assign it.
        end
      # end while statement end
  	end
  end
end
# Write the logic that the enemy randomly generates a value of "0 ~ 2".
class Enemy
  def hand
    #Randomly output the values of goo, choki, and par.
    enemy_hand = rand(0..2)
  end
end
# プレイヤー(自分)が入力した「0 ~ 2」と、敵がランダムで生成した「0 ~ 2」をじゃんけんをさせて、その結果をコンソール上に出力するロジックを書きます。
class Janken
  def pon(player_hand, enemy_hand)
    # 変数「janken」に["グー", "チョキ", "パー"]を代入します。
    janken = ["グー", "チョキ", "パー"]
    # "The opponent's hand is # {value generated by the enemy}." Is output.
    puts "相手の手は#{janken[enemy_hand]}です。"
    #Create logic to play rock-paper-scissors from the return value of the Player class and the return value of the Enemy class.
      # Let's implement according to the example of the type after * * Be careful of commenting out when implementing
      # if 条件を書く Playerクラスの戻り値(player_hand)とEnemyクラスの戻り値(enemy_hand)の値が同じだった場合
      if input_hand.to_i == enemy_hand
      	puts "First"
      # "Aiko" is output.
      #puts "Aiko"
      # Returns "true" to run rock-paper-scissors repeatedly.
      return true
        #Hint! Use "return".
    # elsif If the combination is as follows
	elsif
      #  (player_hand == 0 && enemy_hand == 1) || (player_hand == 1 && enemy_hand == 2) || (player_hand == 2 && enemy_hand == 0)
      (input_hand.to_i == 0 && enemy_hand == 1) || (input_hand.to_i == 1 && enemy_hand == 2) || (input_hand.to_i == 2 && enemy_hand == 0)
      puts "You win"
      # Output "You win".
      return false
      #while Returns "false" to end rock-paper-scissors.
  	else
  		puts "You lose"
    # else * Other than the conditions
      # Output "You are losing".
      return false
      #while Returns "false" to end rock-paper-scissors.
    # end if statement end
	end
	end
end
#Substitute the instantiated Player for the variable "player".
player = Player.new
# Assign an instantiation of Enemy to the variable "enemy".
enemy = Enemy.new
# Assign an instantiation of Janken to the variable "janken".
janken = Janken.new
# Assign "true" to the variable "next_game". * This is because the iterative process is executed while while forever unless "next_game" becomes "false".
# Let's implement according to the example of the type after * * Be careful of commenting out when implementing。
next_game = true
while next_game
# 変数「next_game」にじゃんけんを実行して返ってきた値(戻り値)を代入します。
  # 「janken.pon(player.hand, enemy.hand)」でじゃんけんを実行しています。
next_game = janken.pon(player.hand, enemy.hand)
  # When "false" is returned in the execution result of rock-paper-scissors, this while is terminated. When "true" is returned, it repeats that number of times.
# end while statement end
end